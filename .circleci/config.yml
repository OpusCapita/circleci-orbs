version: 2.1

orbs:
  slack: circleci/slack@volatile
  circle-compare-url: iynere/compare-url@0.0.6

executors:
  cli:
    docker:
      - image: circleci/circleci-cli:0.1.2709

workflows:
  version: 2
  build-and-release:
    jobs:
      - lint
      - build

      - dev-release:
          requires:
            - build
            - lint

      - build-release:
          requires:
            - build
            - lint
          filters:
            tags:
              only: /^v.*/

jobs:
  lint:
    docker:
      - image: singapore/lint-condo
    steps:
      - checkout
      - run:
          'yamllint .'

  build:
    executor: cli
    steps:
      - checkout
      - run: "echo -e \"token: placeholder\nverbose: false > ~/.circleci/cli.yml\""
      - run: "sh scripts/validate-orbs.sh"

  dev-release:
    executor: cli
    steps:
      - checkout
      - circle-compare-url/reconstruct
      - run:
          name: Publish dev releases
          command: |
            # save value stored in file to a local env var
            CIRCLE_COMPARE_URL=$(cat CIRCLE_COMPARE_URL.txt)
            COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')
            echo "Commit range: $COMMIT_RANGE"
            for ORB in src/*/; do
              orbname=$(basename $ORB)
              echo "circleci orb publish ${ORB}orb.yml opuscapita/${orbname}@dev:${CIRCLE_BRANCH}-${CIRCLE_SHA1} --token XXX"
              if [[ $(git diff $COMMIT_RANGE --name-status | grep "$orbname") ]]; then
                (ls ${ORB}orb.yml && echo "orb.yml found, attempting to publish...") || echo "No orb.yml file was found - the next line is expected to fail."
                circleci orb publish ${ORB}orb.yml opuscapita/${orbname}@dev:${CIRCLE_BRANCH}-${CIRCLE_SHA1} --token $CIRCLECI_API_TOKEN
              else
                echo "${orbname} not modified; no need to promote"
              fi
              echo "---------------------------"
            done

  build-release:
    executor: cli
    steps:
      - checkout
      - run:
          name: Publish releases
          command: |
            set -euo pipefail

            [[ "${CIRCLE_TAG}" =~ ^v(.*)$ ]]
            version="${BASH_REMATCH[1]}"

            if [ -z "$version" ]; then
              echo "Wrong tag format! Received ${CIRCLE_TAG}, but expected v1.2.3"
              exit 1
            fi

            for ORB in src/*/; do
              orbname=$(basename $ORB)
              echo "circleci orb publish ${ORB}orb.yml opuscapita/${orbname}@${version} --token XXX"
              circleci orb publish ${ORB}orb.yml opuscapita/${orbname}@${version} --token $CIRCLECI_API_TOKEN
            done
