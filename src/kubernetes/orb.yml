version: 2.1

description: Common tasks for deploying demo installations into Kubernetes cluster.

jobs:
  deploy-demo:
    description: >
      "Deploy demo installation to Kubernetes cluster using 'continuous-delivery' branch.

      Requires:
      - access to https://github.com/OpusCapita/machineuser-vault repository,
      - MACHINEUSER_VAULT_KEY in build environment,
      - 'continuous-delivery' branch is set up in repository being built

      How it works:
      - logs into cluster
      - creates a namespace for deployment
      - copies over required secrets (image pull secret, machineuser-vault, tls certificates)
      - runs 'helm upgrade --install' with chart defined in 'continuous-delivery' branch
      "

    docker:
      - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
    steps:
      - run:
          name: Environment inject
          command: /bin/env_inject.sh
      - run:
          name: Add global variables
          command: |
            slugify() { echo $1 | iconv -t ascii//TRANSLIT | sed -E s/[^a-zA-Z0-9]+/-/g | sed -E s/^-+\|-+$//g | tr A-Z a-z | cut -c1-53; }
            NAMESPACE=$( slugify "dev-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}" )
            SAFE_BRANCH=$( slugify $CIRCLE_BRANCH )
            echo "export NAMESPACE=${NAMESPACE}" >> ${BASH_ENV}
            echo "export SAFE_BRANCH=${SAFE_BRANCH}" >> ${BASH_ENV}
            echo "export IMAGE_PULL_SECRET_NAME=dockerhub" >> ${BASH_ENV}
      - run:
          name: Clone continuous-delivery branch
          working_directory: ~/build
          command: |
            git clone git@github.com:${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git --branch continuous-delivery .continuous-delivery
            cd .continuous-delivery
            git submodule update --init --recursive
      - run:
          name: Login to cluster
          working_directory: ~/build/.continuous-delivery
          command: |
            ./bin/cluster-login.sh \
              --azure-user="$AZURE_USER" \
              --azure-pass="$AZURE_PASS" \
              --subscription="$MINSK_CORE_AZURE_SUBSCRIPTION_ID" \
              --azure-rg="${MINSK_CORE_K8S_AZURE_RG}" \
              --cluster-name="${MINSK_CORE_K8S_AZURE_NAME}"
      - run:
          name: Prepare namespace
          working_directory: ~/build/.continuous-delivery
          # setup a separate namespace in k8s for development installation,
          # and make sure imagePullSecret is present in this namespace before trying to deploy anything
          command: |
            ./bin/setup-dev-namespace.sh \
              --name="${NAMESPACE}" \
              --gh-repo-link="https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" \
              --gh-branch="${CIRCLE_BRANCH}" \
              --gh-commit="${CIRCLE_SHA1}" \
              --ci-build-url="${CIRCLE_BUILD_URL}"
      - run:
          name: Copy over required secrets
          working_directory: ~/build/.continuous-delivery
          command: |
            ./bin/copy-secrets.sh \
              --from-namespace=lunar-system \
              --to-namespace=${NAMESPACE} \
              --secret="${IMAGE_PULL_SECRET_NAME}" \
              --secret="machineuser-vault-master-secret" \
              --secret="${MINSK_CORE_K8S_DEMO_DEPLOYMENTS_HOST}"-tls
      - run:
          name: Install/upgrade helm release
          working_directory: ~/build/.continuous-delivery
          command: |
            export GITHUB_PROJECT="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            export DOCKER_IMAGE_REPOSITORY=$(echo ${GITHUB_PROJECT} | tr '[:upper:]' '[:lower:]')
            export DOCKER_IMAGE_TAG="${CIRCLE_BRANCH}"
            export APPLICATION_URL_PATH="/${CIRCLE_PROJECT_REPONAME}/${SAFE_BRANCH}"
            export APPLICATION_URL="http://${MINSK_CORE_K8S_DEMO_DEPLOYMENTS_HOST}${APPLICATION_URL_PATH}"

            ./bin/helm-upgrade.sh \
              --chart-path=./helm/chart \
              --values-template=./helm/values.template.yaml \
              --namespace=${NAMESPACE} \
              --release-name=${NAMESPACE}
